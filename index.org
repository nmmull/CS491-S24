#+title: CAS CS 400
#+subtitle: Type Theory and Mechanized Reasoning@@html:<br>@@
#+subtitle: Boston University@@html:<br>@@
#+subtitle: Spring 2024
#+options: H:2
This course is an introduction to basic concepts in type theory and
mechanized proof as they relate to programming languages, formal
verification, mathematics, and philosophy. We will only be able to
cover a (biased) selection of rudiments, but the goal is to provide
students (you) with the tools to:
+ construct formal proofs and typing derivations for a variety of
  logics and type theories which undergird systems used for large-scale
  verification tasks;
+ prove meta-theoretic properties of type theories (like normalization
  and soundness) which are core to their utility;
+ implement fundamental algorithms for type theories like
  type-checking and type-inference;
+ formalize non-trivial mathematical theorems and properties of
  programs using Agda;
+ prepare for graduate-level courses in formal methods and programming
  languages;
+ think critically about the fundamental question: /what is a proof?/
  Does a proof need to be human readable? Does it need to be human
  /understandable/? Does it need to be constructive? (What /is/ constructivity?)

*Prerequisites:* CS131, CS330, CS320 (CS332 is recommended but not required)
* Links
+ [[file:Notes/syllabus.pdf][Syllabus]]
+ [[https://www.gradescope.com/courses/700611][Gradescope]]
+ [[https://github.com/nmmull/CS491-S24][Course Repository]]
+ [[https://github.com/nmmull/CS400-Lib][Course Agda Library (CS400-Lib)]]
+ [[*Schedule][Schedule]]
+ Resources:
  + [[file:Notes/course-notes.pdf][Type Theory and Mechanized Reasoning (TTMR)]]
  + [[https://github.com/jespercockx/agda-lecture-notes/blob/master/agda.pdf][Programming and Proving in Agda (PPA)]]
  + [[https://www.cs.kent.ac.uk/people/staff/sjt/TTFP/][Type Theory and Functional Programming (TTFF)]]
  + [[https://avigad.github.io/lamr/#][Logic and Mechanized Reasoning (LAMR)]]
  + [[https://wiki.portal.chalmers.se/agda/pmwiki.php][The Agda Wiki]]
  + [[https://pysathq.github.io][PySAT]]
* Schedule
|-------+------------------------------------------+------------------------|
|  Date | Topic                                    | Notes                  |
|-------+------------------------------------------+------------------------|
| 01-22 | [[#course-intro]]                            |                        |
| 01-24 | [[#ind-rec]]                                 | HW00 out               |
|-------+------------------------------------------+------------------------|
| 01-29 | [[#agda-i]]                                  |                        |
| 02-01 | [[#agda-ii]]                                 | HW01 out               |
|-------+------------------------------------------+------------------------|
| 02-05 | [[#prop-logic]]                              |                        |
| 02-07 | [[#prop-logic-ii]]                           | HW01 due, HW02 out     |
|-------+------------------------------------------+------------------------|
| 02-12 | [[#sat-i]]                                   |                        |
| 02-14 | [[#sat-ii]]                                  | HW02 due, HW03 out     |
|-------+------------------------------------------+------------------------|
| 02-19 | NO CLASS                                 | Presidents’ Day        |
| 02-21 | [[#prop-proof]]                              | HW03 due, HW04 out     |
|-------+------------------------------------------+------------------------|
| 02-26 | [[#lambda-i]]                                |                        |
| 02-28 | [[#lambda-ii]]                               | HW04 due, HW05 out     |
|-------+------------------------------------------+------------------------|
| 03-04 | [[#simple-types-i]]                          |                        |
| 03-06 | [[#simple-types-ii]]                         | HW05 due, proposal out |
|-------+------------------------------------------+------------------------|
|       | SPRING RECESS                            |                        |
|-------+------------------------------------------+------------------------|
| 03-18 | [[#agda-iii]]                                |                        |
| 03-20 | [[#agda-iv]]                                 | proposal due, HW07 out |
|-------+------------------------------------------+------------------------|
| 03-25 | [[#case-study-i]]                            |                        |
| 03-27 | [[#case-study-ii]]                           | HW07 due, HW08 out     |
|-------+------------------------------------------+------------------------|
| 04-01 | [[#int-logic-i]]                             |                        |
| 04-03 | [[#int-logic-ii]]                            | HW08 due, HW09 out     |
|-------+------------------------------------------+------------------------|
| 04-08 | [[#poly-i]]                                  |                        |
| 04-10 | [[#poly-ii]]                                 | HW09 due, HW10 out     |
|-------+------------------------------------------+------------------------|
| 04-15 | NO CLASS                                 | Patriots’ Day          |
| 04-17 | [[#dtt-i]]                                   | HW10 due               |
|-------+------------------------------------------+------------------------|
| 04-22 | [[https://www.bu.edu/cphs/colloquium/mathematics-with-a-human-face/][Mathematics with a Human Face]] (NO CLASS) | Attend for Ex. Credit  |
| 04-24 | [[#dtt-ii]]                                  |                        |
|-------+------------------------------------------+------------------------|
| 04-29 | [[#paradox]]                                 |                        |
| 05-01 | Final Project Presentations              |                        |
|-------+------------------------------------------+------------------------|
* Topics
** What is this course?
:PROPERTIES:
:CUSTOM_ID: course-intro
:END:
*** Summary:
+ give a rough outline of the topics of the course
+ discuss the role of mechanized reasoning in computer science and
  mathematics
+ look briefly at the Curry-Howard isomorphism
*** Reading:
**** [[https://www.quantamagazine.org/the-deep-link-equating-math-proofs-and-computer-programs-20231011/][The Deep Link Equating Math Proofs and Computer Programs (Quanta)]]
**** [[https://www.nature.com/articles/d41586-021-01627-2][Mathematicians welcome computer-assisted proof in ‘grand unification’ theory (Nature)]]
** Induction and Recursion
:PROPERTIES:
:CUSTOM_ID: ind-rec
:END:
*** Summary:
+ review induction over natural numbers and extend this to induction
  over inductively-defined sets
+ think about what "kind of thing" induction is, and how that will
  affect our ability to formalize it
+ discuss the connection between induction and recursion, with any eye
  towards how these will relate in Lean
*** Reading:
**** Required:
***** [[file:Notes/course-notes.pdf][TTMR 2: Induction and Recursion]]
***** [[https://avigad.github.io/lamr/mathematical_background.html][LAMR 2: Mathematical Background]]
**** Supplementary (Advanced):
***** [[https://yforster.github.io/files/talk-chocola-synthetic-computability.pdf][Synthetic Computability (Yannick Forster)]]
***** [[https://mathweb.ucsd.edu/~sbuss/ResearchWeb/BAthesis/Buss_Thesis_OCR.pdf][Bounded Arithmetic (Sam Buss)]]
***** [[https://en.wikipedia.org/wiki/Transfinite_induction][Transfinite Induction (Wikipedia)]]
** Agda I: An Introduction
:PROPERTIES:
:CUSTOM_ID: agda-i
:END:
+ Summary:
  + examine at Agda as a function programming language, especially as
    compared to OCaml (the language of CAS CS 320)
  + start looking at dependent types and what we can do with them
+ Reading:
  + [[https://github.com/jespercockx/agda-lecture-notes/blob/master/agda.pdf][PPA 1: An introduction to Agda]]
** Agda II: Dependent Types
:PROPERTIES:
:CUSTOM_ID: agda-ii
:END:
*** Summary:
+ play with dependent types, with the goal of seeing some of their
  strangeness, not necessarily understanding how they work
+ start to think about how dependent types can be used to represent
  "properties" and how that might be useful for mechanized reasoning
*** Reading:
+ [[https://github.com/jespercockx/agda-lecture-notes/blob/master/agda.pdf][PPA 2: Dependent Types]]
** Propositional Logic I: An Introduction
:PROPERTIES:
:CUSTOM_ID: prop-logic
:END:
*** Summary:
+ discuss in more detail the standard workflow of Agda
+ introduce the syntax and semantics of propositional logic (as well
  as what exactly these terms mean)
+ see how we can use Agda as a framework for implementing
  propositional logic
*** Reading:
**** Required:
***** [[file:Notes/course-notes.pdf][TTMR 4: Classical Propositional Logic]]
****** 4.1: Syntax
****** 4.2: Semantics
**** Supplementary:
***** [[https://nmmull.gitbook.io/cmsc-10500/notes/logic][A Primer on Propositional Logic]]
***** [[http://intrologic.stanford.edu/chapters/chapter_02.html][Propositional Logic]]
***** [[https://avigad.github.io/lamr/propositional_logic.html#][LAMR 4: Propositional Logic]]
** Propositional Logic II: Meta-Theory
:PROPERTIES:
:CUSTOM_ID: prop-logic-ii
:END:
*** Summary:
+ dive deeper into pattern matching in Agda, introducing
  with-abstraction for pattern matching on intermediate computations
+ introduce semantic notions in logic, particularly up to the notion of
  logical equivalence
*** Reading:
**** Required:
***** [[file:Notes/course-notes.pdf][TTMR 4: Classical Propositional Logic]]
****** 4.3: Meta-Theory
****** 4.4: Functional Completeness
**** Supplementary:
***** [[https://avigad.github.io/lamr/propositional_logic.html#][LAMR 4: Propositional Logic]]
** SAT-Solvers I: An Introduction
:PROPERTIES:
:CUSTOM_ID: sat-i
:END:
*** Summary:
+ finish discussing semantics notions in propositional logic
+ talk about functional completeness and normal forms
+ introduce SAT solvers and the DPLL procedure
*** Reading:
**** Required:
+ [[file:Notes/course-notes.pdf][TTMR 4: Classical Propositional Logic]]
  + 4.5: Conjunctive Normal Form
+ [[file:Notes/course-notes.pdf][TTMR 5: SAT Solvers]]
  + 5.1: Restriction
  + 5.2: DPLL
**** Supplementary:
+ [[https://avigad.github.io/lamr/decision_procedures_for_propositional_logic.html#unit-propagation-and-the-pure-literal-rule][LAMR 6.2: Unit Propagation and the Pure Literal Rule]]
+ [[https://avigad.github.io/lamr/decision_procedures_for_propositional_logic.html#dpll][LAMR 6.3: DPLL]]
** SAT-Solvers II: In Practice
:PROPERTIES:
:CUSTOM_ID: sat-ii
:END:
*** Summary:
+ look at a couple encodings of propositions as CNF formulas
+ look at an example application of SAT-solvers
*** Reading:
**** Required:
+ [[file:Notes/course-notes.pdf][TTMR 5: SAT Solvers]]
  + 5.3 CNF Encodings
  + 5.4 Example: Sudoku
**** Supplementary:
+ [[https://avigad.github.io/lamr/using_sat_solvers.html#][LAMR 7: Using SAT Solvers]]
** Propositional Proofs
:PROPERTIES:
:CUSTOM_ID: prop-proof
:END:
*** Summary:
+ define the notion of a proof system and a Gentzen-style sequent proof
+ introduce resolution as an example of a proof system
+ demonstrate the connection between resolution and DPLL.
*** Reading:
+ [[https://avigad.github.io/lamr/deduction_for_propositional_logic.html#resolution][LAMR 8.2: Resolution]]
+ [[https://avigad.github.io/lamr/deduction_for_propositional_logic.html#resolution-and-dpll][LAMR 8.4: Resolution and DPLL]]
** The Lambda Calculus I: An Introduction
:PROPERTIES:
:CUSTOM_ID: lambda-i
:END:
*** Summary:
+ introduce the syntax and semantics of the lambda calculus.
*** Reading:
+ [[https://www.cs.kent.ac.uk/people/staff/sjt/TTFP/][TTFP 2: Functional Programming and Lambda-Calculi]]
  + 2.2: The untyped lambda-calculus
  + 2.3: Evaluation
** The Lambda Calculus II: Meta-Theory
:PROPERTIES:
:CUSTOM_ID: lambda-ii
:END:
*** Summary:
+ introduce semantic notions of the lambda calculus, including
  normalization and evaluation strategies.
+ look at how to encode data.
+ talk breifly about De Bruijn indices and alpha equivalence.
*** Reading:
+ [[https://www.cs.kent.ac.uk/people/staff/sjt/TTFP/][TTFP 2: Functional Programming and Lambda-Calculi]]
  + 2.4: Convertibility
  + 2.5: Expressiveness
** Simple Types I: An Introduction
:PROPERTIES:
:CUSTOM_ID: simple-types-i
:END:
*** Summary:
+ introduce the simply typed lambda calculus (STLC)
+ give an outline of the proof that STLC is strongly normalizing
*** Reading:
+ [[https://www.cs.kent.ac.uk/people/staff/sjt/TTFP/][TTFP 2: Function Programming and Lambda-Calculi]]
  + 2.6: Typed lambda-calculus
  + 2.7: Strong normalization
+ [[https://people.mpi-sws.org/~dg/teaching/pt2012/sn.pdf][Strong Normalization for Simply Typed Lambda Calculus (Notes)]]
** Simple Types II: The Curry-Howard Isomorphism
:PROPERTIES:
:CUSTOM_ID: simple-types-ii
:END:
*** Summary:
+ finish the discussion of strong normalization
+ discuss data types in STLC
+ connect data types to the Curry-Howard isomorphism
*** Reading:
+ [[https://www.cs.kent.ac.uk/people/staff/sjt/TTFP/][TTFP 2: Function Programming and Lambda-Calculi]]
  + 2.8: Further type constructors: the product
  + 2.9: Base types: natural numbers
+ [[https://github.com/jespercockx/agda-lecture-notes/blob/master/agda.pdf][PPA 3.1: The Curry-Howard correspondence: Propositional logic]]
** Agda III: The Proof Assistant
:PROPERTIES:
:CUSTOM_ID: agda-iii
:END:
*** Summary:
+ recall the Curry-Howard isomorphism and see how it applies to Agda
+ see how to interpret Agda programs as mathematical proofs and
  translate mathematics into Agda
*** Reading:
+ [[https://github.com/jespercockx/agda-lecture-notes/blob/master/agda.pdf][PPA 3: The Curry-Howard correspondence (whole chapter)]]
** Agda IV: Equational Reasoning
:PROPERTIES:
:CUSTOM_ID: agda-iv
:END:
*** Summary:
+ discuss how to prove complex equalities in Agda
+ see many examples in code
*** Reading:
+ [[https://github.com/jespercockx/agda-lecture-notes/blob/master/agda.pdf][PPA 4: Equational reasoning in Agda]] (note: we use different syntax,
  but the ideas transfer)
** Case Study I: STLC in Agda
:PROPERTIES:
:CUSTOM_ID: case-study-i
:END:
*** Summary:
+ see how to formalize the simply typed lambda calculus in Agda
+ prove several meta-theoretic lemmas, leading to type preservation
*** Reading:
+ look through the code from lecture
** Case Study II: Verified Sorting
:PROPERTIES:
:CUSTOM_ID: case-study-ii
:END:
*** Summary:
+ verify that (functional) insertion sort returns an ordered list
+ see the connections between how the algorithm is written and how
  properties are proved about it
*** Reading:
+ look through the code from lecture
** Intuitionistic Logic I: An introduction
:PROPERTIES:
:CUSTOM_ID: int-logic-i
:END:
*** Summary:
+ introduce a proof system for intuitionistic propositional logic with
  propositional variables (IPL) as the simply typed lambda calculus
  with type variables with type variables (STLC) minus the
  computational content
+ introduce a proof system for classical propositional logic (CPL) as
  IPL plus a variant of proof by contradiction
+ look at classical principles which are not intuitionistically
  provable
+ see what is gained by thinking intuitionistically (e.g., the
  disjunction property)
*** Reading:
+ please look through the lecture slides
** Intuitionistic Logic II: Kripke Semantics
:PROPERTIES:
:CUSTOM_ID: int-logic-ii
:END:
*** Summary:
+ recall the notions of soundness and completeness
+ note that IPL is not complete with respect to valuations
+ present Kripke models as an alternative semantics for which IPL is
  sound and complete
+ use Kripke countermodels to prove that some classical principles
  cannot be proved in IPL
*** Reading:
+ please look through the lecture slides
** Polymorphism I: In Introduction
:PROPERTIES:
:CUSTOM_ID: poly-i
:END:
*** Summary:
+ look generally the notion of polymorphism
+ introduce System F as a typed lambda calculi with polymorphism
+ discuss briefly the role of type annotations in type checking and
  type inference
*** Reading:
+ please look through the lecture slides
** Polymorphism II: Logic in System F
:PROPERTIES:
:CUSTOM_ID: poly-ii
:END:
*** Summary:
+ recap System F
+ look at how to represent logical connectives in System F
+ briefly discuss unification, implicit variables, and the type
  inference problem
** Dependent type theory I: An introduction
:PROPERTIES:
:CUSTOM_ID: dtt-i
:END:
** Dependent type theory II: Meta-Theory
:PROPERTIES:
:CUSTOM_ID: dtt-ii
:END:
** Advanced: Type-theoretic paradoxes
:PROPERTIES:
:CUSTOM_ID: paradox
:END:
** TODO Advanced: Real world mechanized proving
:PROPERTIES:
:CUSTOM_ID: real-world
:END:
** TODO The Curry-Howard isomorphism
:PROPERTIES:
:CUSTOM_ID: curry-howard
:END:
** TODO Advanced: The lambda cube
:PROPERTIES:
:CUSTOM_ID: lambda-cube
:END:
** TODO Predicate Logic I: Theories and Models
:PROPERTIES:
:CUSTOM_ID: theories
:END:
** TODO Predicate Logic II: SAT Modulo Theories (SMT)
:PROPERTIES:
:CUSTOM_ID: smt
:END:
** TODO Intuitionistic Propositional Logic
:PROPERTIES:
:CUSTOM_ID: int-prop-logic-i
:END:
** TODO Quantifiers and higher-order logic
:PROPERTIES:
:CUSTOM_ID: hol
:END:
** TODO Advanced: Extensions of type theory
:PROPERTIES:
:CUSTOM_ID: extensions
:END:
